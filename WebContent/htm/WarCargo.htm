<!DOCTYPE html>
<!-- saved from url=(0060)https://examples.phaser.io/embed.php?f=camera/camera+lerp.js -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>WarCargo</title>
<meta name="viewport" content="initial-scale=1 maximum-scale=1 user-scalable=0 minimal-ui">
<script src="../js/jquery-2.0.3.min.js" type="text/javascript"></script>
<script src="../js/phaser.2.6.2.min.js" type="text/javascript"></script>
<script src="../js/blob.js" type="text/javascript"></script>
<script src="../js/canvas-to-blob.js" type="text/javascript"></script>
<script src="../js/filesaver.js" type="text/javascript"></script>
<script src="../js/embed.js" type="text/javascript"></script>
<style>
body {
	margin: 0px;
	padding: 0px;
	font-family: Arial;
	font-size: 14px;
	background-color: #000000;
	color: #fff;
}
</style>
</head>
<body style="">
<div id="phaser-example"></div>
<script type="text/javascript">

var IDE_HOOK = false;
var VERSION = '2.6.2';

var game = new Phaser.Game(800, 600, Phaser.CANVAS, 'phaser-example', { preload: preload, create: create, update: update, render: render });

function preload() {

	game.load.image('background','../img/debug-grid-1920x1920.png');
	game.load.image('player','../img/phaser-dude.png');
	game.load.image('tree', '../img/propTree.blob.jpg');

}

var player;
var cursors;
var forest;
var tree;

function create() {

	game.add.tileSprite(0, 0, 1920, 1920, 'background');

	game.world.setBounds(0, 0, 1920, 1920);

	game.physics.startSystem(Phaser.Physics.P2JS);

	player = game.add.sprite(game.world.centerX, game.world.centerY, 'player');
	tree = game.add.sprite(game.world.centerX + 100, game.world.centerY, 'tree');


	//foreset = createAllProps();
	/*
	forest = game.add.group();
	forest.enableBody = true;

	for (var i = 0; i < 50; i++)
	{
		var s = forest.create(game.world.randomX, game.world.randomY, 'tree');
		s.body.collideWorldBounds = true;
		s.body.bounce.set(1);
		s.body.velocity.setTo(0, 0);
	}
*/


	game.physics.p2.enable(player);
	game.physics.p2.enable(tree);
	tree.body.immovable = true;

	player.body.fixedRotation = true;
	//player.body.collideWorldBounds = true;

	cursors = game.input.keyboard.createCursorKeys();

	//  Notice that the sprite doesn't have any momentum at all,
	//  it's all just set by the camera follow type.
	//  0.1 is the amount of linear interpolation to use.
	//  The smaller the value, the smooth the camera (and the longer it takes to catch up)
	game.camera.follow(player, Phaser.Camera.FOLLOW_LOCKON, 0.1, 0.1);

}

function createAllProps() {
	forest = game.add.group();
	forest.enableBody = true;

	for (var i = 0; i < 50; i++)
	{
		var s = forest.create(game.world.randomX, game.world.randomY, 'tree');
		s.body.collideWorldBounds = true;
		s.body.bounce.set(0);
		//s.body.velocity.setTo(10 + Math.random() * 40, 10 + Math.random() * 40);
	}
	return forest;
}

var iSpeedDist = 100;

function doCollision() {
	console.log("collision");
}

function update() {

	player.body.setZeroVelocity();
	//game.physics.arcade.collide(player, tree, null, this);
//	game.physics.arcade.collide(player, tree, function () {
//		player.body.setZeroVelocity();
 //	   player.body.velocity.setTo(0,0);
//		tree.body.setZeroVelocity();
//		tree.body.velocity.setTo(0,0);
//		console.log('hit?');
//	}, null, this);

	if (cursors.up.isDown) {
		player.body.moveUp(iSpeedDist)
	} else if (cursors.down.isDown) {
		player.body.moveDown(iSpeedDist);
	}

	if (cursors.left.isDown) {
		player.body.velocity.x = -iSpeedDist;
	} else if (cursors.right.isDown) {
		player.body.moveRight(iSpeedDist);
	}

	player.rotation = game.physics.arcade.angleToPointer(player) + 1.57;

	game.physics.arcade.collide(player, tree, doCollision, null, this);

}

function render() {

	game.debug.text("Arrows to move.", 32, 32);

}

</script>

</body></html>