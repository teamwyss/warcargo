<!DOCTYPE html>
<!-- saved from url=(0058)https://examples.phaser.io/embed.php?f=games/starstruck.js -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>WarCargo 0.0.2</title>
<meta name="viewport" content="initial-scale=1 maximum-scale=1 user-scalable=0 minimal-ui">
<script src="../js/jquery-2.0.3.min.js" type="text/javascript"></script>
<script src="../js/phaser.2.6.2.min.js" type="text/javascript"></script>
<script src="../js/blob.js" type="text/javascript"></script>
<script src="../js/canvas-to-blob.js" type="text/javascript"></script>
<script src="../js/filesaver.js" type="text/javascript"></script>
<script src="../js/embed.js" type="text/javascript"></script>
<style>
body {
	margin: 0px;
	padding: 0px;
	font-family: Arial;
	font-size: 14px;
	background-color: #000000;
	color: #fff;
}
</style>
</head>
<body style="">
<div id="phaser-example"></div>
<script type="text/javascript">

var IDE_HOOK = false;
var VERSION = '0.0.2';

var wc = {
	window: {
		w: window.innerWidth - 2, 
		h: window.innerHeight - 4
	},
	player: {
		speedXY: 300
	}
};

var game = new Phaser.Game(wc.window.w, wc.window.h, Phaser.CANVAS, 'phaser-example', { preload: preload, create: create, update: update, render: render });

function preload() {

	game.load.tilemap('level1', '../data/level1.json', null, Phaser.Tilemap.TILED_JSON);
	game.load.image('tiles-1', '../img/tiles-1.png');
	//game.load.spritesheet('dude', '../img/dude.png', 32, 48);
	game.load.spritesheet('dude', '../img/dude.png', 80, 80);
	game.load.spritesheet('droid', '../img/droid.png', 32, 32);
	game.load.image('starSmall', '../img/star.png');
	game.load.image('starBig', '../img/star2.png');
	game.load.image('background', '../img/background2.png');

}

var map;
var tileset;
var layer;
var player;
//var facing = 'left';
var jumpTimer = 0;
var cursors;
var jumpButton;
var bg;

function create() {

	game.physics.startSystem(Phaser.Physics.ARCADE);

	game.stage.backgroundColor = '#3D5942';

	bg = game.add.tileSprite(0, 0, (wc.window.w * 2) + 300, (wc.window.h * 2) + 200, 'background');
	bg.fixedToCamera = false;

	map = game.add.tilemap('level1');

	map.addTilesetImage('tiles-1');

	map.setCollisionByExclusion([ 7, 16]);

	layer = map.createLayer('Tile Layer 1');

	// Un-comment this on to see the collision tiles.
	//layer.debug = true;
	
	layer.resizeWorld();

	//game.physics.arcade.gravity.y = 250;

	//player = game.add.sprite(80, 80, 'dude');
	player = game.add.sprite(game.world.centerX, game.world.centerY, 'dude');
	player.anchor.setTo(0.5, 0.5);
	game.physics.enable(player, Phaser.Physics.ARCADE);

	player.body.bounce.y = 0; // was 0.2
	player.body.collideWorldBounds = true;
	//player.body.setSize(20, 32, 5, 16);
	player.body.setSize(80, 80, 0, 0);

	player.animations.add('act', [0, 1, 2, 3], 10, true);
	//player.animations.add('left', [0, 1, 2, 3], 10, true);
	//player.animations.add('turn', [4], 20, true);
	//player.animations.add('right', [5, 6, 7, 8], 10, true);

	game.camera.follow(player);

	cursors = game.input.keyboard.createCursorKeys();
	jumpButton = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);

}

function update() {

	game.physics.arcade.collide(player, layer);
	player.rotation = game.physics.arcade.angleToPointer(player) + 1.57;

	player.body.velocity.x = 0;
	player.body.velocity.y = 0;

	if (cursors.up.isDown) {
		player.body.velocity.y = -wc.player.speedXY;
	} else if (cursors.down.isDown) {
		player.body.velocity.y = wc.player.speedXY;
	}

	if (cursors.left.isDown) {
		player.body.velocity.x = -wc.player.speedXY;

		//if (facing != 'left') {
		//	player.animations.play('left');
		//	facing = 'left';
		//}
	} else if (cursors.right.isDown) {
		player.body.velocity.x = wc.player.speedXY;

		//if (facing != 'right') {
		//	player.animations.play('right');
		//	facing = 'right';
		//}
	//} else {
		//if (facing != 'idle') {
			//player.animations.stop();

			//if (facing == 'left') {
			//	player.frame = 0;
			//} else {
			//	player.frame = 5;
			//}

			//facing = 'idle';
		//}
	}
	if (jumpButton.isDown) {
		player.animations.play('act');
	} else {
		player.animations.stop();
		player.frame = 0;
	}
}

function render () {
	/*
	game.debug.text(game.time.physicsElapsed, 32, 32);
	game.debug.body(player);
	game.debug.bodyInfo(player, 16, 24);
	*/
}
		
</script>

	

</body></html>