<!DOCTYPE html>
<!-- saved from url=(0058)https://examples.phaser.io/embed.php?f=games/starstruck.js -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>WarCargo</title>
<meta name="viewport" content="initial-scale=1 maximum-scale=1 user-scalable=0 minimal-ui">
<script src="../js/jquery-2.0.3.min.js" type="text/javascript"></script>
<script src="../js/phaser.2.6.2.min.js" type="text/javascript"></script>
<script src="../js/blob.js" type="text/javascript"></script>
<script src="../js/canvas-to-blob.js" type="text/javascript"></script>
<script src="../js/filesaver.js" type="text/javascript"></script>
<script src="../js/embed.js" type="text/javascript"></script>
<script src="../js/scoreboard.js" type="text/javascript"></script>
<script src="../js/mainMenu.js" type="text/javascript"></script>
<link rel="stylesheet" type="text/css" href="../css/scoreboard.css">
<link rel="stylesheet" type="text/css" href="../font/armalite.css">
<link rel="stylesheet" type="text/css" href="../css/mainMenu.css">
<style>
body {
	margin: 0px;
	padding: 0px;
	font-family: Arial;
	font-size: 14px;
	background-color: #000000;
	color: #fff;
}
</style>
</head>
<body>
<div id="scoreboard-frame">
	<div id="player-stats-frame">
		<div id="points-level-frame">
			<div id="level-label">score</div>
			<div id="points-guage"><div class="fuel"></div><div id="points-digit">0</div></div>
			<div id="level-digit">0</div>
		</div>
		<div id="health-frame">
			<div id="health-label">health</div>
			<div id="health-guage"><div class="fuel"></div><div id="health-digit">100</div></div>
		</div>
	</div>
	<div id="pauseButton" onclick="mainMenu.show();">Pause</div>
	<div id="inventory-frame">
		<div id="bacon" class="slot"><div class="icon"></div><div class="digit"></div></div>
		<div id="wood" class="slot"><div class="icon"></div><div class="digit"></div></div>
		<div id="stone" class="slot"><div class="icon"></div><div class="digit"></div></div>
		<div id="bombs" class="slot"><div class="icon"></div><div class="digit"></div></div>
	</div>
</div>
<div id="mainMenu-bgScreen" style="display: block;"></div>
<div id="mainMenu-frame" style="display: block;">
	<div id="appHeading">war cargo</div>
	<div id="appHeadingExplosion"></div>
	<div class="closeButton" onclick="mainMenu.hide();">X</div>
	<div class="playButton" onclick="mainMenu.hide();">PLAY</div>
</div>

<div id="game-canvass"></div>
<script type="text/javascript">

var IDE_HOOK = false;
var VERSION = '0.0.3';

var wc = {
	window: {
		w: window.innerWidth - 2, 
		h: window.innerHeight - 4
	},
	player: {
		speedXY: 300
	}
};

var game = new Phaser.Game(wc.window.w, wc.window.h, Phaser.CANVAS, 'game-canvass', { preload: preload, create: create, update: update, render: render });

function preload() {
	
	document.title = "WarCargo " + VERSION;

	game.load.tilemap('level1', '../data/level1.json', null, Phaser.Tilemap.TILED_JSON);
	game.load.image('tiles-1', '../img/tiles-1.png');
	//game.load.spritesheet('dude', '../img/dude.png', 32, 48);
	game.load.spritesheet('dude', '../img/dude.png', 80, 80);
	//game.load.spritesheet('droid', '../img/droid.png', 32, 32);
	//game.load.image('starSmall', '../img/star.png');
	//game.load.image('starBig', '../img/star2.png');
	game.load.image('bgGrass', '../img/bgGrass.png');
	game.load.image('bgWater','../img/bgWater.png');
    game.load.image('bacon', '../img/bacon.png');

    // Scoreboard
    game.load.image('bgScoreboard', '../img/bgScoreboard.png');

}

var map;
var tileset;
var layer;
var player;
var food;
//var bacon;
//var facing = 'left';
var jumpTimer = 0;
var cursors;
var jumpButton;
var bgGrass;
//var bgWater;

function create() {

	game.physics.startSystem(Phaser.Physics.ARCADE);

	game.stage.backgroundColor = '#3D5942';

	var iBgW = (wc.window.h * 2) + 200;
	var iBgH = (wc.window.h * 2) + 200;
	var iBgW = 64 * 64;
	var iBgH = iBgW;
	bgGrass = game.add.tileSprite(0, 0, iBgW, iBgH, 'bgGrass');
	bgGrass.fixedToCamera = false;

	map = game.add.tilemap('level1');

	map.addTilesetImage('tiles-1');

	map.setCollisionByExclusion([ 1, 2, 3, 7, 8, 9, 11, 12, 17, 18, 20, 21, 22, 23, 24 ,25 ,26 ,27]);

	layer = map.createLayer('Tile Layer 1');

	// Un-comment this on to see the collision tiles.
	//layer.debug = true;
	
	layer.resizeWorld();

	//game.physics.arcade.gravity.y = 250;
	
	
	
	/*
	Add Bacon
	*/
	food = game.add.group();
	var aiPos = [
		[game.world.centerX - 250, game.world.centerY - 60]
		,[game.world.centerX - 220, game.world.centerY - 42]
		,[game.world.centerX - 200, game.world.centerY - 32]
		,[4 * 64, 17 * 64]
		,[22 * 64, 1 * 64]
		,[40 * 64, 6 * 64]
		,[(32.5 * 64), 40 * 64]
		,[1 * 64, 1 * 64]
		,[1 * 64, 30 * 64]
		,[(30.5 * 64), 31 * 64]
		,[(27.5 * 64), 29 * 64]
		,[2 * 64, 4 * 64]
	];
    for (var iB = 0; iB < aiPos.length; iB++) {
        //  This creates a new Phaser.Sprite instance within the group
        var baconToAdd = food.create(aiPos[iB][0], aiPos[iB][1], 'bacon');
		game.physics.enable(baconToAdd, Phaser.Physics.ARCADE);
    }

	//player = game.add.sprite(80, 80, 'dude');
	player = game.add.sprite(game.world.centerX, game.world.centerY, 'dude');
	player.anchor.setTo(0.5, 0.5);
	game.physics.enable(player, Phaser.Physics.ARCADE);

	player.body.bounce.y = 0; // was 0.2
	player.body.collideWorldBounds = true;
	player.body.setSize(40, 40, 20, 20);

	player.animations.add('act', [0, 1, 2, 3], 10, true);
	game.camera.follow(player);

	cursors = game.input.keyboard.createCursorKeys();
	jumpButton = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
	
	scoreboard.init(this);
	mainMenu.init();
	//setTimeout(
	//	function(){
			mainMenu.show();
	//	}
	//	,1000
	//);

}

/**
 * Called when the player collides with (collects) some food.
 */
function foodCollisionHandler (player, foodItem) {
	foodItem.kill();
	scoreboard.points.add(100);
	scoreboard.health.add(-10);
	scoreboard.bacon.add();
}

function update() {
	
	/* Bacon */
	game.physics.arcade.collide(player, food, foodCollisionHandler);


	game.physics.arcade.collide(player, layer);
	player.rotation = game.physics.arcade.angleToPointer(player) + 1.57;

	player.body.velocity.x = 0;
	player.body.velocity.y = 0;

	if (cursors.up.isDown) {
		player.body.velocity.y = -wc.player.speedXY;
	} else if (cursors.down.isDown) {
		player.body.velocity.y = wc.player.speedXY;
	}

	if (cursors.left.isDown) {
		player.body.velocity.x = -wc.player.speedXY;
	} else if (cursors.right.isDown) {
		player.body.velocity.x = wc.player.speedXY;
	}
	if (jumpButton.isDown) {
		player.animations.play('act');
	} else {
		player.animations.stop();
		player.frame = 0;
	}
}

function render () {
	var isDebug = false;
	if (isDebug) {
		game.debug.text(game.time.physicsElapsed, 32, 32);
		game.debug.body(player);
		game.debug.bodyInfo(player, 16, 24);
	}
	
}
		
</script>
</body></html>