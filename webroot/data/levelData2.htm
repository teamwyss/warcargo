<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Edit WarCargo</title>
<style type="text/css">
pixel {
	width: 32px;
	height: 32px;
	background-color: #ddeedd;
	display: inline-block;
	background-image:url('../img/tiles-1.png?refreshNOW');
	background-repeat: no-repeat;
	background-position: 0px 0px;
	background-size: 288px auto;
}
pixel:hover {
	background-color: yellow;
}
</style>
<script type="text/javascript" src="levelDataOld.js"></script>
<script type="text/javascript" src="../js/jquery-3.4.1.min.js"></script>
<script type="text/javascript">

var data;
$.getJSON('level1.json',function(jsonData){
	console.log(jsonData);
	//d ebugger;
	data = jsonData.layers[0].data;
	initPage();
});




var uiEdit;
var uiPalette;
var iWidth = 64;
var iHeight = 64;
var iTotalTiles = (iWidth * iHeight);

var iInk = 4;

var NL = "<br>";
var iGL = 0;
/*
for (; iGL < gl.length; iGL++) {
	if (gl[iGL] == UNK) {}
}
*/
var dim = {
	cols: 9 // In main sprite, how many cols.
	,rows: 3 // How many rows.
	,pixXY: 32 // Size of each image rendered in map.
};
function decorateImg(iCounterXY, ixInsideSprite, isPalette) {
	var sClick = " onclick=\"swap(this, " + iCounterXY 
		+ ");\" id=\"T" + iCounterXY + "\"";
	if (isPalette) {
		sClick = " onclick=\"iInk = " + iCounterXY 
			+ ";\" id=\"P" + iCounterXY + "\"";
	}
	if (ixInsideSprite == 0) {
		return "<pixel" + sClick 
			+ " style=\"background-image: none;\"></pixel>";
	}
	//var iX = (ixInsideSprite % dim.cols) - 1;
	var sOut = "<pixel" + sClick 
		+ " style=\"" + convertImgIxToCssStyle(ixInsideSprite) 
		+ "\" title=\"pos:" + ixInsideSprite + "\"></pixel>"
		;
	return sOut;
}
function convertImgIxToCssStyle(ixInsideSprite) {
	var iX = 0;
	var iY = (dim.rows + 1);
	if (ixInsideSprite != 0) {
		iX = ((ixInsideSprite - 1) % dim.cols);
		iY = Math.round((ixInsideSprite - iX) / dim.cols);
	}
	
	return "background-position: -" 
		+ (iX * dim.pixXY)
		+ "px -"
		+ (iY * dim.pixXY)
		+ "px;"
		;
}
function swap(tile, iTrg) {
	var iInkToSet = iInk;
	if (data[iTrg] != 0) {
		iInkToSet = 0;
	}
	data[iTrg] = iInkToSet;
	tile.style = convertImgIxToCssStyle(iInkToSet);
}
function getPaletteHtml() {
	var sOut = "total px = " + iWidth + " * " + iHeight;
	var iInkCurr = 1;
	for (var iRowCurr = 0; iRowCurr < dim.rows; iRowCurr++) {
		sOut += NL;
		for (var iColCurr = 0; iColCurr < dim.cols; iColCurr++) {
			sOut += decorateImg(iInkCurr, iInkCurr, true);
			iInkCurr++;
		}
	}
	return sOut;
}
function createMapFromData() {
	uiPalette.innerHTML = getPaletteHtml();
	var sOut = "";
	var iCounterXY = 0;
	for (var iH = 0; iH < iHeight; iH++) {
		for (var iW = 0; iW < iWidth; iW++) {
			var ixInsideSprite = data[iCounterXY];
			sOut += decorateImg(iCounterXY, ixInsideSprite, false);
			iCounterXY++;
		}	
		sOut += NL;
	}	
	uiEdit.innerHTML = sOut;
}
function outputDataToField() {
	var sOut = "";
	var iCounterXY = 0;
	for (var iH = 0; iH < iHeight; iH++) {
		for (var iW = 0; iW < iWidth; iW++) {
			var ixInsideSprite = data[iCounterXY];
			if (ixInsideSprite < 10) {
				sOut += " ";
			}
			sOut += ixInsideSprite;
			if (iCounterXY < (iTotalTiles - 1)) {
				sOut += ","
			}
			iCounterXY++;
		}	
		sOut += "\n";
	}	
	document.querySelector("#uiOutput").value = sOut;
}
function initPage(){
	uiEdit = document.querySelector("div#uiEdit");
	uiEdit.style.width = ((iWidth + 2) * dim.pixXY) + "px";
	uiEdit.style.height = ((iWidth + 2) * dim.pixXY) + "px";
	uiPalette = document.querySelector("div#palette");
	createMapFromData();
}
window.addEventListener('DOMContentLoaded', (event) => {
});

</script>
</head>
<body>
<div id="palette"></div>
<div id="uiEdit" style="width: 800px;line-height:10px;"></div>
<button onclick="outputDataToField()">output</button>
<textarea id="uiOutput" style="width: 1500px;height:200px;font-family: monospace;"></textarea>
</body>
</html>